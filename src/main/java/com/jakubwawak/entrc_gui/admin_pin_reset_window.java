/*
by Jakub Wawak
kubawawak@gmail.com
all rights reserved
 */
package com.jakubwawak.entrc_gui;

import com.jakubwawak.database.Database_Connector;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JTextField;

/**
 *Object for creating admin reset window
 * @author kubaw
 */
public class admin_pin_reset_window extends javax.swing.JDialog {

    /**
     * Creates new form admin_pin_reset_window
     */
    Database_Connector database;
    
    public admin_pin_reset_window(java.awt.Frame parent, boolean modal,Database_Connector database) throws SQLException {
        super(parent, modal);
        this.database = database;
        initComponents();
        load_window();
        this.setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        field_user_exit_pin = new javax.swing.JTextField();
        field_user_ask_pin = new javax.swing.JTextField();
        field_manage_pin = new javax.swing.JTextField();
        button_save = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        field_admin_manage_pin = new javax.swing.JTextField();
        button_options = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reset PIN - Administrator");

        jLabel2.setText("PIN zamykający okno:");

        jLabel3.setText("PIN resetujący użytkownika:");

        jLabel4.setText("PIN zarządzania danymi:");

        field_user_exit_pin.setText("jTextField1");

        field_user_ask_pin.setText("jTextField1");

        field_manage_pin.setText("jTextField1");

        button_save.setText("Zapisz");
        button_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_saveActionPerformed(evt);
            }
        });

        jLabel5.setText("PIN aktywujacy okno:");

        field_admin_manage_pin.setText("jTextField1");

        button_options.setText("Opcje");
        button_options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_optionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(field_user_exit_pin, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(field_user_ask_pin)
                            .addComponent(field_manage_pin)
                            .addComponent(field_admin_manage_pin)))
                    .addComponent(button_save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(button_options)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(field_user_exit_pin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(field_user_ask_pin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(field_manage_pin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(field_admin_manage_pin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(button_save, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_options)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_saveActionPerformed
        try{
            logic();
        }catch(SQLException e){
            new message_window_jdialog(this,true,"Bład bazy danych: "+e.toString());
        }
    }//GEN-LAST:event_button_saveActionPerformed

    private void button_optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_optionsActionPerformed
        new options_window(this,true,database);
    }//GEN-LAST:event_button_optionsActionPerformed

    /**
     * Function maintaing logic in admin_pin_reset_window
     * @throws SQLException 
     */
    void logic() throws SQLException{
        /**
         * button states:
         * 
         * Zapisz
         * Błedne dane
         * Potwierdzasz?
         * Zapisano
         */
        
        switch (button_save.getText()){
            
            case "Zapisz":
                if ( validate_fields() ){
                    field_admin_manage_pin.setEnabled(false);
                    field_manage_pin.setEnabled(false);
                    field_user_ask_pin.setEnabled(false);
                    field_user_exit_pin.setEnabled(false);
                    button_save.setText("Potwierdzasz?");
                }
                else{
                    button_save.setText("Błędne dane");
                }
                break;
            case "Błędne dane":
                if ( validate_fields() ){
                    button_save.setText("Zapisz");
                }
                else{
                    button_save.setText("Błędne dane");
                }
                break;
            case "Potwierdzasz?":
                if (database.load_admin_PIN_data(prepare_data())){
                    button_save.setText("Zapisano");
                }
                else{
                    new message_window_jdialog(this,true,"Błąd bazy danych");
                    dispose();
                }
                break;
            case "Zapisano":
                dispose();
                break;
            default:
                break;
        }
    }
    
    /**
     * Function for loading data from components
     * @return 
     */
    ArrayList<String> prepare_data(){
        ArrayList<String> data_to_redeem = new ArrayList<>();
        
        data_to_redeem.add(field_user_exit_pin.getText());
        data_to_redeem.add(field_user_ask_pin.getText());
        data_to_redeem.add(field_manage_pin.getText());
        data_to_redeem.add(field_admin_manage_pin.getText());
        
        return data_to_redeem;
    }
    /**
     * Function for loading components
     * @throws SQLException 
     */
    void load_window() throws SQLException{
        ArrayList<String> data = database.get_admin_PIN_data();
        
        if ( data != null ){
            // loading fileds
            field_admin_manage_pin.setText(data.get(3));
            field_manage_pin.setText(data.get(2));
            field_user_ask_pin.setText(data.get(1));
            field_user_exit_pin.setText(data.get(0));
        }
        else{
            new message_window_jdialog(this,true,"Błąd pobierania danych PIN");
            dispose();
        }
    }
    
    /**
     * Function for validating String got from fields
     * @param object
     * @return boolean
     */
    boolean validate_field(JTextField object){
        String content = object.getText();
        String [] elements = {"0","1","2","3","4","5","6","7","8","9"};
        List<String> data = Arrays.asList(elements);
        int size = content.length();
        for (Character c : content.toCharArray()){
            if ( data.contains(String.valueOf(c))){
                size--;
            }
        }
        return size == 0;
    }
    
    /**
     * Function validating content stored in fields
     * @return boolean
     */
    boolean validate_fields(){
        return validate_field(field_admin_manage_pin) && validate_field(field_manage_pin)
                && validate_field(field_user_ask_pin) && validate_field(field_user_exit_pin);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_options;
    private javax.swing.JButton button_save;
    private javax.swing.JTextField field_admin_manage_pin;
    private javax.swing.JTextField field_manage_pin;
    private javax.swing.JTextField field_user_ask_pin;
    private javax.swing.JTextField field_user_exit_pin;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
