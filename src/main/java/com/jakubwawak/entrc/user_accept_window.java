/*
by Jakub Wawak
kubawawak@gmail.com
all rights reserved
 */
package com.jakubwawak.entrc;

import com.github.sarxos.webcam.Webcam;
import com.mysql.cj.conf.ConnectionUrlParser.Pair;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author jakubwawak
 */
public class user_accept_window extends javax.swing.JDialog {

    /**
     * Creates new form user_accept_window
     */
    
    Database_Connector database;
    Guard user;
    String photo_src;
    Pair<LocalDateTime,String> action_data;
    
    public user_accept_window(java.awt.Frame parent, boolean modal,Database_Connector database,Guard user) throws SQLException {
        super(parent, modal);
        
        this.database = database;
        this.user = user;
        photo_src = "";
        
        initComponents();
        load_window();
        this.setLocationRelativeTo(null);
        
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_action = new javax.swing.JLabel();
        label_namesurname = new javax.swing.JLabel();
        button_accept = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea_message = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        label_action.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        label_action.setText("WEJSCIE/WYJSCIE");

        label_namesurname.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        label_namesurname.setText("Imie nazwisko");

        button_accept.setFont(new java.awt.Font("Dialog", 0, 38)); // NOI18N
        button_accept.setText("ZATWIERDŹ");
        button_accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_acceptActionPerformed(evt);
            }
        });

        textarea_message.setColumns(20);
        textarea_message.setRows(5);
        jScrollPane1.setViewportView(textarea_message);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label_action)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label_namesurname, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button_accept, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE))
                        .addContainerGap(35, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_action)
                    .addComponent(label_namesurname, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_accept, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_acceptActionPerformed
        try{
            if ( action_data.right.equals("ENTR") || action_data.right.equals("ENTR_F")){
                int ret_code = database.set_exit_event(database.get_worker_id_bypin(user.pin), take_picture());
                
                switch(ret_code){
                    case 1:
                        dispose();
                        break;
                    case -1:
                        new message_window(null,true,"Błąd bazy danych. Skontaktuj się z administratorem");
                        break;
                    default:
                        new message_window(null,true,"Wystąpił nierozpoznany błąd. Skontaktuj się z administratorem");
                        break;
                }
            }
            else if ( action_data.right.equals("NEW") ){
                if(database.set_entrance_event(database.get_worker_id_bypin(user.pin), take_picture())){
                    dispose();
                }
                else{
                    new message_window(null,true,"Błąd rejestracji. Skontaktuj się z administratorem");
                    dispose();
                }
                
            }
            else{
                if(database.set_entrance_event(database.get_worker_id_bypin(user.pin), take_picture())){
                    dispose();
                }
                else{
                    new message_window(null,true,"Błąd rejestracji. Skontaktuj się z administratorem");
                    dispose();
                }
            }
        }catch(SQLException e){
            try {
                new message_window(null,true,"Błąd bazy danych. Skontaktuj się z administratorem");
                database.log("Failed to accept user action ("+e.toString()+")");
                dispose();
            } catch (SQLException ex) {
                Logger.getLogger(user_accept_window.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(user_accept_window.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_button_acceptActionPerformed
    
    /**
     * Function for handle webcam feed
     * @return String
     * Returns absolute path to photo
     */
    String take_picture() throws SQLException, IOException{
        if( !System.getProperty("os.name").equals("Mac OS X")){
            Webcam webcam = Webcam.getDefault();        // loading default webcam
            webcam.open();                              // opening stream

            Pair<String,String> database_data = database.prepare_photo_name(database.get_worker_id_bypin(user.pin));
            String photo_name = database_data.right + database_data.left+".png";    // preparing photo name

            File photo_file = new File(photo_name);
            ImageIO.write(webcam.getImage(), "PNG", photo_file);

            return photo_file.getAbsolutePath();
        }
        else{
            return "webcam is not supported on the machine";
        }
    }

    /**
     * Function for loading window
     * @throws SQLException 
     * 
     */
    void load_window() throws SQLException{
        textarea_message.setEditable(false);
        //loading name of the user
        label_namesurname.setText(database.get_worker_data(user.pin));
        //loading data about last action
        action_data = database.get_last_user_event(database.get_worker_id_bypin(user.pin));
        
        // setting event name
        if ( action_data.right.equals("ENTR") || action_data.right.equals("ENTR_F")){
            label_action.setText("WYJŚCIE");
        }
        else{
            label_action.setText("WEJŚCIE");
        }
        
        String message = database.check_message(database.get_worker_id_bypin(user.pin));
        // getting message for user
        if( message != null ){
            textarea_message.setText(message);
            textarea_message.setVisible(true);
            database.set_message_seen(database.get_worker_id_bypin(user.pin));
        }
        else{
            textarea_message.setVisible(false);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_accept;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_action;
    private javax.swing.JLabel label_namesurname;
    private javax.swing.JTextArea textarea_message;
    // End of variables declaration//GEN-END:variables
}
